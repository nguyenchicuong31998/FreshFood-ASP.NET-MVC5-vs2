@using WebsiteThucPhamSach_VS2.Models
@model PaymentModel
@{
    ViewBag.Title = "Thanh Toán";
    Layout = "~/Views/Shared/_LayoutClient.cshtml";
}
<script src="https://js.stripe.com/v3/"></script>
@{
    var sessionId = TempData["sessionId"] ?? string.Empty;
}
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="wrapper-breadcrumb">
                <ul class="nav d-flex flex-row border-bottom">
                    <li class="breadcrumb-item ">
                        <a href="~/Trang-Chu" class="breadcrumb-link">Trang chủ</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="~/Thanh-Toan" class="breadcrumb-link active">Thanh Toán</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("Payment", "Home", FormMethod.Post, new { @id = "formPayment" }))
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-12 col-lg-6">
                <h2 class="text-uppercase mb-5">Thông tin thanh toán</h2>
                <div class="form-group row mb-4">
                    <label class="col-12" for="">Họ và tên*</label>
                    <div class="col-12">
                        @Html.TextBoxFor(PaymentModel => PaymentModel.display_name, new { @name = "display_name", @class = "form-control input-share input-size input-height", @Placeholder = "Họ và tên*" })
                        @Html.ValidationMessageFor(PaymentModel => PaymentModel.display_name, "", new { @class = "text-error" })
                    </div>
                </div>
                <div class="form-group row mb-4">
                    <label class="col-12" for="">Số điện thoại*</label>
                    <div class="col-12">
                        @Html.TextBoxFor(PaymentModel => PaymentModel.phone_number, new { @class = "form-control input-share input-size input-height", @Placeholder = "Số điện thoại*" })
                        @Html.ValidationMessageFor(PaymentModel => PaymentModel.phone_number, "", new { @class = "text-error" })
                    </div>
                </div>
                <div class="form-group row mb-4">
                    <label class="col-12" for="">Địa chỉ*</label>
                    <div class="col-12">
                        @Html.TextAreaFor(PaymentModel => PaymentModel.address, new { @class = "form-control input-share input-size", @rows = "4", @Placeholder = "Địa chỉ*" })
                        @Html.ValidationMessageFor(PaymentModel => PaymentModel.address, "", new { @class = "text-error" })
                    </div>
                </div>
                <div class="form-group row mb-4">
                    <label class="col-12" for="">Email*</label>
                    <div class="col-12">
                        @Html.TextBoxFor(PaymentModel => PaymentModel.email, new { @class = "form-control input-share input-size input-height", @Placeholder = "Email*" })
                        @Html.ValidationMessageFor(PaymentModel => PaymentModel.email, "", new { @class = "text-error" })
                    </div>
                </div>

                <div class="form-group row mb-4">
                    <label class="col-12" for="">Hình thức thanh toán*</label>
                    <div class="col-12">
                        @Html.DropDownListFor(PaymentModel => PaymentModel.form_payments, (IEnumerable<SelectListItem>)ViewBag.formPayment, "--Chọn hình thức thanh toán --", new { @name = "form_payments", @class = "form-control input-share input-size input-height", @style = "height:35px;" })
                        @Html.ValidationMessageFor(PaymentModel => PaymentModel.form_payments, "", new { @class = "text-error" })
                    </div>
                </div>

                <div class="form-group row mb-4">
                    <label class="col-12" for="">Hình thức giao hàng*</label>
                    <div class="col-12">
                        @Html.DropDownListFor(PaymentModel => PaymentModel.form_delivery, (IEnumerable<SelectListItem>)ViewBag.formDelivery, new { @class = "form-control input-share input-size input-height", @style = "height:35px;" })
                        @Html.ValidationMessageFor(PaymentModel => PaymentModel.form_delivery, "", new { @class = "text-error" })
                    </div>
                </div>

            </div>
            <div class="col-12 col-lg-6">
                <h2 class="text-uppercase mb-5">Đơn hàng của bạn</h2>
                @Html.Action("YourOrderPartial", "Home")
                <div class="d-flex justify-content-end mt-4">
                    <input id="normal" class="btn btn-primary btn-lg" type="submit" value="Thanh toán" />
                    <div id="paypal-button"></div>
                    <div id="checkout-stripe">Pay now</div>
                    @*<div id="check_out"></div>*@
                </div>
            </div>
        </div>
    </div>
}
@section scripts{
    <script src="https://www.paypalobjects.com/api/checkout.js"></script>
    @*<script src="https://www.baokim.vn/assets/lib/js/baokim.js"></script>*@
    <script type="text/javascript">
        $(document).ready(function () {
            $('#checkout-stripe').css("display", "none");

            $('#form_payments').change(function () {
                console.log("vaoo", $('#form_payments').prop('selectedIndex'));
                var index = $('#form_payments').prop('selectedIndex');
                switch (index) {
                    case 1:
                        $('#normal').css("display", "block");
                        $('#checkout-stripe').css("display", "none");
                        $('.paypal-button').remove();
                        break;
                    case 2:
                        $('#normal').css("display", "none");
                        $('#paypal-button').css("display", "block");
                        $('#checkout-stripe').css("display", "none");

                        var totalMoney = $('.total-money').text();
                        totalMoney = (totalMoney.split(" ")[0] / 23).toFixed(2);

                        paypal.Button.render({
                            // Configure environment
                            env: 'sandbox',
                            client: {
                                sandbox: 'AR1FeowA4S3uUrOm5K9osOABAlkI1UwSuJ5EWNH5fZYPgmHfBBbDlT0wVKX4PuzrK-tYitm0Wo_ni6mb',
                                production: 'demo_production_client_id'
                            },
                            // Customize button (optional)
                            locale: 'en_US',
                            style: {
                                size: 'medium',
                                color: 'gold',
                                shape: 'pill',
                            },

                            // Enable Pay Now checkout flow (optional)
                            commit: true,

                            // Set up a payment
                            payment: function (data, actions) {

                                return actions.payment.create({
                                    transactions: [{
                                        amount: {
                                            total: totalMoney,
                                            currency: 'USD'
                                        }
                                    }]
                                });
                            },
                            // Execute the payment
                            onAuthorize: function (data, actions) {
                                var value = $("#formPayment").serialize();
                                console.log("vaoo", value);
                                $.ajax({
                                    url: "/Home/PaymentPayPal",
                                    data: $("#formPayment").serialize(),
                                    type: "POST",
                                    dataType: "json",
                                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8'
                                });
                                return actions.payment.execute().then(function () {
                                    window.alert('Bạn đã thanh toán thành công!');
                                    document.cookie = 'CartCookie=[];-1; path=/';
                                    location.href = "Trang-Chu";
                                });
                                //return actions.request.post('/home/paymentpaypal', { data: $("#formpayment").serialize() }, { contenttype: 'application/x-www-form-urlencoded; charset=utf-8'}).then(function () {
                                //    window.alert('bạn đã thanh toán thành công!');
                                //})
                            }
                        }, '#paypal-button');
                        break;
                    case 3:
                        //var stripe = Stripe('pk_test_51Gz5Z7Ac1Jepd0KNEX1EucjxP9b1tseBad8oXaUnnvFN6K41UDfPtd3Od7QPFMJV0wKuVjkXAgY2oZ5LrglLQvYa006yySuaqg');
                        var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');
                        $('#checkout-stripe').css("display", "block");
                        $('#normal').css("display", "none");
                        $('.paypal-button').remove();
                           var checkoutButton = document.getElementById('checkout-stripe');
                            var sessionId = '@sessionId';
                            checkoutButton.addEventListener('click', function () {
                                stripe.redirectToCheckout({

                                    //sessionId: "cs_test_deeEcyFLAd9zlW0FvB6xOezVVztR9CT83obtDhDTWqFl7asoPhJC9ecx"
                                    sessionId: sessionId
                                }).then(function (result) {
                                    // If `redirectToCheckout` fails due to a browser or network
                                    // error, display the localized error message to your customer
                                    // using `result.error.message`.
                                });
                            });
                        break;
                    case 4:
                        //let baokim = new Baokim(
                        //    'check_out', // id of css
                        //    'a18ff78e7a9e44f38de372e093d87ca1', // key
                        //    { //order
                        //        mrc_order_id: `my_order_id_${Math.random().toString(36).substring(2)}_${Date.now()}`,
                        //        total_amount: 67000,
                        //        payment_method_type: 'card',
                        //        description: 'thanh toan dien thoai iphone xs max 512Gb',
                        //        success_url: 'http://my-merchant.com/callback-success',
                        //        cancel_url: 'http://my-merchant.com/callback-cancel',
                        //    },
                        //    { // button config
                        //        title: 'Thanh toán Với Bảo Kim',
                        //        style: {
                        //            background: '#fff'
                        //        }
                        //    });
                        //baokim.create();
                        break;
                    default:
                        break;
                }
            })
        })
    </script>
}